import cv2
import numpy as np
import math

from vision import Camera
import tools as tools

camera = Camera(port=0, pitch=0)
img = camera.get_frame()

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
gray = cv2.equalizeHist(gray)
gray = cv2.blur(gray, (7, 7))

x = cv2.Sobel(gray, cv2.cv.CV_16S, 1, 0, 3)
x = cv2.convertScaleAbs(x, x)

y = cv2.Sobel(gray, cv2.cv.CV_16S, 0, 1, 3)
y = cv2.convertScaleAbs(y, y)

total = cv2.addWeighted(x,0.5,y,0.5,0)

# detect circles in the image
edges = cv2.Canny(total,75,150)
circles = cv2.HoughCircles(total, cv2.cv.CV_HOUGH_GRADIENT, 1, 1, param1=175,param2=10,minRadius=2,maxRadius=7)

cv2.imshow("output", img)
cv2.waitKey(0)

cv2.imshow("output", total)
cv2.waitKey(0)

# ensure at least some circles were found
if circles is not None:
	# convert the (x, y) coordinates and radius of the circles to integers
	circles = np.round(circles[0, :]).astype("int")
 
	# loop over the (x, y) coordinates and radius of the circles
	for (x, y, r) in circles:
		# draw the circle in the output image, then draw a rectangle
		# corresponding to the center of the circle
		cv2.circle(img, (x, y), r, (0, 255, 0), 1)
 	cv2.imshow("output", edges)
	cv2.waitKey(0)
	# show the output image
	cv2.imshow("output", img)
	cv2.waitKey(0)

