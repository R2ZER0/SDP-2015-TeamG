import cv2
import numpy as np
import math

from vision.vision import Camera
import vision.tools as tools

camera = Camera(port=0, pitch=0)
img = camera.get_frame()
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
gray = cv2.equalizeHist(gray)
gray = cv2.blur(gray, (3, 3))

x = cv2.Sobel(gray, cv2.cv.CV_16S, 1, 0, 3)
x = cv2.convertScaleAbs(x, x)

y = cv2.Sobel(gray, cv2.cv.CV_16S, 0, 1, 3)
y = cv2.convertScaleAbs(y, y)

total = cv2.addWeighted(x,0.5,y,0.5,0)
cv2.imshow("output", total)
cv2.waitKey(0)
cv2.destroyAllWindows()

output = img.copy()
contours,h = cv2.findContours(total.copy(),cv2.cv.CV_RETR_TREE,cv2.cv.CV_CHAIN_APPROX_SIMPLE)
for cnt in contours:
	approx = cv2.approxPolyDP(cnt,0.01*cv2.arcLength(cnt,True),True)
	if len(approx) > 6:
		cv2.drawContours(output,[cnt],0,(0,255,255),-1)

cv2.imshow("output", img)
cv2.waitKey(0)
cv2.destroyAllWindows()

cv2.imshow("output", total)
cv2.waitKey(0)
cv2.destroyAllWindows()

cv2.imshow("output", output)
cv2.waitKey(0)
cv2.destroyAllWindows()

gray = total
sift = cv2.SIFT(nfeatures = 20)
kp = sift.detect(gray,None)

img=cv2.drawKeypoints(img,kp)

cv2.imwrite('sift_keypoints.jpg',img)
img=cv2.drawKeypoints(img,kp,flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
cv2.imwrite('sift_keypoints.jpg',img)

cv2.imshow("output", img)
cv2.waitKey(0)
cv2.destroyAllWindows()