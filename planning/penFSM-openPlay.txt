machineParams
name 				 penFsm
inAlph				 ballInZone, notGotBall, gotBall, notAtDest, atDest, shotIncomplete, shotComplete
states 				 starting, gettingBall, turningToTakeShot, takingShot, shotDone
initialState		 starting
finalState	    	 shotDone
nextPlanOnCompletion planning/attackerFsm.txt
activeAtStart	     YES

transitions
<starting, ballInZone, [AcquireBall, world, robot, role], gettingBall>
<gettingBall, notGotBall, [EXISTING], gettingBall>
<gettingBall, gotBall, [TurnToPoint, world, robot, role, world.their_goal.x, world.their_goal.y - 20 if (world.their_defender.y - world.their_goal.y) > 0 else world.their_goal.y + 20], turningToTakeShot>
<turningToTakeShot, notAtDest, [EXISTING], turningToTakeShot>
<turningToTakeShot, atDest, [Shoot, world, robot, role], takingShot>
<takingShot, shotIncomplete, [EXISTING], takingShot>
<takingShot, shotComplete, [MoveToPoint, world, robot, role, 0, 0], shotDone>


lambdaConditions
"ballInZone" : lambda planner :		planner.world.pitch.zones[planner.our_robot.zone].isInside(planner.world.ball.x, planner.world.ball.y)

"notGotBall" : lambda planner :		planner.getFSM('penFsm').currentTask != None and isinstance(planner.getFSM('penFsm').currentTask, AcquireBall) and not planner.getFSM('penFsm').currentTask.complete
"gotBall" : lambda planner :		planner.getFSM('penFsm').currentTask != None and isinstance(planner.getFSM('penFsm').currentTask, AcquireBall) and planner.getFSM('penFsm').currentTask.complete

"notAtDest" : lambda planner :		planner.getFSM('penFsm').currentTask != None and isinstance(planner.getFSM('penFsm').currentTask, TurnToPoint) and not planner.getFSM('penFsm').currentTask.complete
"atDest" : lambda planner : 		planner.getFSM('penFsm').currentTask != None and isinstance(planner.getFSM('penFsm').currentTask, TurnToPoint) and planner.getFSM('penFsm').currentTask.complete

"shotIncomplete" : lambda planner : planner.getFSM('penFsm').currentTask != None and isinstance(planner.getFSM('penFsm').currentTask, Shoot) and not planner.getFSM('penFsm').currentTask.complete
"shotComplete" : lambda planner :	planner.getFSM('penFsm').currentTask != None and isinstance(planner.getFSM('penFsm').currentTask, Shoot) and planner.getFSM('penFsm').currentTask.complete
